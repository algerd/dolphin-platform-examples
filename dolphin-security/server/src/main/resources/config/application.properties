# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
# MySQL: Connection url for default database
spring.datasource.url = jdbc:mysql://localhost:3306/musicbook
spring.datasource.username = root
spring.datasource.password =

#load sql sources
spring.datasource.initialize=true
#comma separated list of resources or url-pattern (warning?: order of loading - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f schema-11-asca, schema-12-hhhs ...)
#spring.datasource.data= classpath:/sql/data/data-*.sql
#spring.datasource.schema = classpath:/sql/schema/schema-*.sql

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ===============================
# = Data - Rest
# ===============================
#spring.data.rest.basePath=/api
#sec
#server.session.timeout = 600

# ===============================
# = DOLPHIN-PLATFORM
# ===============================
server.contextPath=/security

logging.level.com.canoo.dolphin.server.impl.gc=trace
logging.level.com.canoo.dolphin.server.context=trace

dolphinPlatform.showRemotingLogging=false